{"ast":null,"code":"var _jsxFileName = \"/Users/billyhung/Desktop/take-home-master/client/src/components/HippoInfo.js\";\nimport React from \"react\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nconst HippoInfo = ({\n  hippo\n}) => {\n  var _hippo$resource, _hippo$resource$name;\n\n  const renderTestResult = hippo => {\n    let output;\n    let report = 0;\n    testResults.forEach(result => {\n      if (result.patient_id === hippo.id) {\n        var _result$resource, _result$resource$valu;\n\n        output = result === null || result === void 0 ? void 0 : (_result$resource = result.resource) === null || _result$resource === void 0 ? void 0 : (_result$resource$valu = _result$resource.valueCodeableConcept) === null || _result$resource$valu === void 0 ? void 0 : _result$resource$valu.text;\n      }\n    });\n\n    if (output) {\n      return output;\n    } else {\n      return /*#__PURE__*/React.createElement(Select, {\n        labelId: \"demo-simple-select-label\",\n        id: \"demo-simple-select\",\n        value: report,\n        onChange: e => {\n          report = e.target.value;\n          console.log(e.target.value); // addTestResult({\n          //   resourceType: \"Observation\",\n          //   code: \"\",\n          //   subject: { reference: `Patient/${hippo.id}` },\n          // });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        value: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(MenuItem, {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }\n      }, \"Positive for Hippo Virus\"), /*#__PURE__*/React.createElement(MenuItem, {\n        value: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }\n      }, \"Negative for Hippo Virus\"), /*#__PURE__*/React.createElement(MenuItem, {\n        value: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }\n      }, \"Inconclusive result for Hippo Virus\"));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(TableRow, {\n    key: hippo.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, hippo === null || hippo === void 0 ? void 0 : (_hippo$resource = hippo.resource) === null || _hippo$resource === void 0 ? void 0 : (_hippo$resource$name = _hippo$resource.name) === null || _hippo$resource$name === void 0 ? void 0 : _hippo$resource$name.map(n => {\n    return n.given;\n  })), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, renderTestResult(hippo)), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, new Date(hippo.updated_at).toISOString().split(\"T\")[0]));\n};\n\nexport default HippoInfo;","map":{"version":3,"sources":["/Users/billyhung/Desktop/take-home-master/client/src/components/HippoInfo.js"],"names":["React","TableCell","TableRow","HippoInfo","hippo","renderTestResult","output","report","testResults","forEach","result","patient_id","id","resource","valueCodeableConcept","text","e","target","value","console","log","name","map","n","given","Date","updated_at","toISOString","split"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAAA;;AAC/B,QAAMC,gBAAgB,GAAID,KAAD,IAAW;AAClC,QAAIE,MAAJ;AACA,QAAIC,MAAM,GAAG,CAAb;AACAC,IAAAA,WAAW,CAACC,OAAZ,CAAqBC,MAAD,IAAY;AAC9B,UAAIA,MAAM,CAACC,UAAP,KAAsBP,KAAK,CAACQ,EAAhC,EAAoC;AAAA;;AAClCN,QAAAA,MAAM,GAAGI,MAAH,aAAGA,MAAH,2CAAGA,MAAM,CAAEG,QAAX,8EAAG,iBAAkBC,oBAArB,0DAAG,sBAAwCC,IAAjD;AACD;AACF,KAJD;;AAMA,QAAIT,MAAJ,EAAY;AACV,aAAOA,MAAP;AACD,KAFD,MAEO;AACL,0BACE,oBAAC,MAAD;AACE,QAAA,OAAO,EAAC,0BADV;AAEE,QAAA,EAAE,EAAC,oBAFL;AAGE,QAAA,KAAK,EAAEC,MAHT;AAIE,QAAA,QAAQ,EAAGS,CAAD,IAAO;AACfT,UAAAA,MAAM,GAAGS,CAAC,CAACC,MAAF,CAASC,KAAlB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYJ,CAAC,CAACC,MAAF,CAASC,KAArB,EAFe,CAGf;AACA;AACA;AACA;AACA;AACD,SAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAcE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAE,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAdF,eAeE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAE,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAfF,eAgBE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAE,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAhBF,eAiBE,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAE,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAjBF,CADF;AAqBD;AACF,GAlCD;;AAoCA,sBACE,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEd,KAAK,CAACQ,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,IAArB;AAA0B,IAAA,KAAK,EAAC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,KADH,aACGA,KADH,0CACGA,KAAK,CAAES,QADV,4EACG,gBAAiBQ,IADpB,yDACG,qBAAuBC,GAAvB,CAA4BC,CAAD,IAAO;AACjC,WAAOA,CAAC,CAACC,KAAT;AACD,GAFA,CADH,CADF,eAME,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BnB,gBAAgB,CAACD,KAAD,CAA1C,CANF,eAOE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,IAAIqB,IAAJ,CAASrB,KAAK,CAACsB,UAAf,EAA2BC,WAA3B,GAAyCC,KAAzC,CAA+C,GAA/C,EAAoD,CAApD,CADH,CAPF,CADF;AAaD,CAlDD;;AAoDA,eAAezB,SAAf","sourcesContent":["import React from \"react\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nconst HippoInfo = ({ hippo }) => {\n  const renderTestResult = (hippo) => {\n    let output;\n    let report = 0;\n    testResults.forEach((result) => {\n      if (result.patient_id === hippo.id) {\n        output = result?.resource?.valueCodeableConcept?.text;\n      }\n    });\n\n    if (output) {\n      return output;\n    } else {\n      return (\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={report}\n          onChange={(e) => {\n            report = e.target.value;\n            console.log(e.target.value);\n            // addTestResult({\n            //   resourceType: \"Observation\",\n            //   code: \"\",\n            //   subject: { reference: `Patient/${hippo.id}` },\n            // });\n          }}\n        >\n          <MenuItem value={0}></MenuItem>\n          <MenuItem value={1}>Positive for Hippo Virus</MenuItem>\n          <MenuItem value={2}>Negative for Hippo Virus</MenuItem>\n          <MenuItem value={3}>Inconclusive result for Hippo Virus</MenuItem>\n        </Select>\n      );\n    }\n  };\n\n  return (\n    <TableRow key={hippo.id}>\n      <TableCell component=\"th\" scope=\"row\">\n        {hippo?.resource?.name?.map((n) => {\n          return n.given;\n        })}\n      </TableCell>\n      <TableCell align=\"right\">{renderTestResult(hippo)}</TableCell>\n      <TableCell align=\"right\">\n        {new Date(hippo.updated_at).toISOString().split(\"T\")[0]}\n      </TableCell>\n    </TableRow>\n  );\n};\n\nexport default HippoInfo;\n"]},"metadata":{},"sourceType":"module"}